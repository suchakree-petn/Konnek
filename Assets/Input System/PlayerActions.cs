//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input System/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""InGame"",
            ""id"": ""ecefe591-544a-4236-a5b5-4ca05910d397"",
            ""actions"": [
                {
                    ""name"": ""SelectLeftColumn"",
                    ""type"": ""Button"",
                    ""id"": ""f371e340-0361-4ee3-acac-5beaa5d971b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectRightColumn"",
                    ""type"": ""Button"",
                    ""id"": ""30851467-f7f1-4ac1-80b5-4e61d77c63bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayPiece"",
                    ""type"": ""Button"",
                    ""id"": ""ded330bc-046c-4948-8360-4d1fa737a463"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""0f870d26-31bd-4d09-a0f6-19d24e7df913"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""08292d2c-d2fe-4f18-949e-dae0db098ba6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLeftColumn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35231f89-d7a4-4e2f-8781-c47c85f02e3e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLeftColumn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6c913e1-01f4-4198-bce9-5ee910883ded"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectRightColumn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24455aa4-5b08-48c1-bfc9-e42fcfb584ae"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectRightColumn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52d17dd2-7aea-4cdd-aba5-8ac95de21f8b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07ec08c9-3548-4731-905b-e1e6ab83df72"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGame
        m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
        m_InGame_SelectLeftColumn = m_InGame.FindAction("SelectLeftColumn", throwIfNotFound: true);
        m_InGame_SelectRightColumn = m_InGame.FindAction("SelectRightColumn", throwIfNotFound: true);
        m_InGame_PlayPiece = m_InGame.FindAction("PlayPiece", throwIfNotFound: true);
        m_InGame_LeftClick = m_InGame.FindAction("LeftClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGame
    private readonly InputActionMap m_InGame;
    private List<IInGameActions> m_InGameActionsCallbackInterfaces = new List<IInGameActions>();
    private readonly InputAction m_InGame_SelectLeftColumn;
    private readonly InputAction m_InGame_SelectRightColumn;
    private readonly InputAction m_InGame_PlayPiece;
    private readonly InputAction m_InGame_LeftClick;
    public struct InGameActions
    {
        private @PlayerActions m_Wrapper;
        public InGameActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectLeftColumn => m_Wrapper.m_InGame_SelectLeftColumn;
        public InputAction @SelectRightColumn => m_Wrapper.m_InGame_SelectRightColumn;
        public InputAction @PlayPiece => m_Wrapper.m_InGame_PlayPiece;
        public InputAction @LeftClick => m_Wrapper.m_InGame_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_InGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
        public void AddCallbacks(IInGameActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameActionsCallbackInterfaces.Add(instance);
            @SelectLeftColumn.started += instance.OnSelectLeftColumn;
            @SelectLeftColumn.performed += instance.OnSelectLeftColumn;
            @SelectLeftColumn.canceled += instance.OnSelectLeftColumn;
            @SelectRightColumn.started += instance.OnSelectRightColumn;
            @SelectRightColumn.performed += instance.OnSelectRightColumn;
            @SelectRightColumn.canceled += instance.OnSelectRightColumn;
            @PlayPiece.started += instance.OnPlayPiece;
            @PlayPiece.performed += instance.OnPlayPiece;
            @PlayPiece.canceled += instance.OnPlayPiece;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
        }

        private void UnregisterCallbacks(IInGameActions instance)
        {
            @SelectLeftColumn.started -= instance.OnSelectLeftColumn;
            @SelectLeftColumn.performed -= instance.OnSelectLeftColumn;
            @SelectLeftColumn.canceled -= instance.OnSelectLeftColumn;
            @SelectRightColumn.started -= instance.OnSelectRightColumn;
            @SelectRightColumn.performed -= instance.OnSelectRightColumn;
            @SelectRightColumn.canceled -= instance.OnSelectRightColumn;
            @PlayPiece.started -= instance.OnPlayPiece;
            @PlayPiece.performed -= instance.OnPlayPiece;
            @PlayPiece.canceled -= instance.OnPlayPiece;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
        }

        public void RemoveCallbacks(IInGameActions instance)
        {
            if (m_Wrapper.m_InGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGameActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGameActions @InGame => new InGameActions(this);
    public interface IInGameActions
    {
        void OnSelectLeftColumn(InputAction.CallbackContext context);
        void OnSelectRightColumn(InputAction.CallbackContext context);
        void OnPlayPiece(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
    }
}
